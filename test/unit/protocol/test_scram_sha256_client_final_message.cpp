//
// Copyright (c) 2025 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#include <boost/core/lightweight_test.hpp>

#include <string_view>
#include <vector>

#include "nativepg/protocol/scram_sha256.hpp"
#include "test_utils.hpp"

using namespace nativepg::protocol;

namespace {

// TODO: more cases?

void test_serialize()
{
    // Setup
    constexpr unsigned char proof[] = {
        0x9e, 0xab, 0xe1, 0xf0, 0x51, 0x8b, 0x9f, 0x2e, 0xdc, 0xb3, 0x1c, 0x5,  0x60, 0x9,  0x4f, 0x38,
        0xa4, 0x7b, 0xf,  0x11, 0xea, 0xce, 0x5e, 0x63, 0x37, 0x74, 0x5d, 0x9d, 0x3b, 0x0a, 0x06, 0x4b,
    };
    constexpr unsigned char expected[] = {
        0xff, 0xff, 0x70, 0x00, 0x00, 0x00, 0x6c, 0x63, 0x3d, 0x62, 0x69, 0x77, 0x73, 0x2c, 0x72, 0x3d,
        0x38, 0x4c, 0x2b, 0x56, 0x2f, 0x33, 0x79, 0x74, 0x6c, 0x39, 0x35, 0x62, 0x74, 0x74, 0x49, 0x39,
        0x39, 0x2f, 0x62, 0x68, 0x4d, 0x78, 0x61, 0x77, 0x4f, 0x48, 0x63, 0x47, 0x71, 0x2f, 0x31, 0x58,
        0x72, 0x75, 0x6a, 0x44, 0x48, 0x51, 0x73, 0x72, 0x4c, 0x2f, 0x78, 0x2f, 0x69, 0x74, 0x38, 0x45,
        0x2c, 0x70, 0x3d, 0x6e, 0x71, 0x76, 0x68, 0x38, 0x46, 0x47, 0x4c, 0x6e, 0x79, 0x37, 0x63, 0x73,
        0x78, 0x77, 0x46, 0x59, 0x41, 0x6c, 0x50, 0x4f, 0x4b, 0x52, 0x37, 0x44, 0x78, 0x48, 0x71, 0x7a,
        0x6c, 0x35, 0x6a, 0x4e, 0x33, 0x52, 0x64, 0x6e, 0x54, 0x73, 0x4b, 0x42, 0x6b, 0x73, 0x3d,
    };
    std::vector<unsigned char> buff{0xff, 0xff};
    const scram_sha256_client_final_message msg{"8L+V/3ytl95bttI99/bhMxawOHcGq/1XrujDHQsrL/x/it8E", proof};
    constexpr std::string_view without_proof = "c=biws,r=8L+V/3ytl95bttI99/bhMxawOHcGq/1XrujDHQsrL/x/it8E";

    // Serialize
    auto res = serialize(msg, buff);

    // Check
    NATIVEPG_TEST(res.has_value())
    NATIVEPG_TEST_CONT_EQ(res.value(), without_proof)
    NATIVEPG_TEST_CONT_EQ(buff, expected)
}

}  // namespace

int main()
{
    test_serialize();

    return boost::report_errors();
}